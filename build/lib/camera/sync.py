import json
import time
import cv2
import numpy as np
import scipy.optimize
from dorna2 import dorna, tool
from board import charuco
from camera import camera



class sync(object):
	"""docstring for sync"""
	def __init__(self, robot, camera, board):
		super(sync, self).__init__()
		self.camera = camera
		self.robot = robot
		self.board = board

	"""
	xyz_tcp or h: is the xyz of a point in space with respect to the robot TCP (toolhead) coordinate system 
	xyz_c or c: is the xyz of a point in space with respect to the camera coordinate system
	Camera is connected to the robot toolhead. Find T (orthonormal) and b such that:
	h = b + c * T
	
	We get rnd sample points and hi = b + ci * T
	T = [[t00, t01, t02], [t10, t11, t12], [t20, t21, t22]]
	or you can write T in the following format
	T = np.matrix([[np.cos(alpha), -np.sin(alpha), 0], [np.sin(alpha), np.cos(alpha), 0], [0, 0, 1]])* \
		np.matrix([[np.cos(beta), 0, np.sin(beta)], [0, 1, 0], [-np.sin(beta), 0, np.cos(beta)]])* \
		np.matrix([[1, 0, 0], [0, np.cos(gamma), -np.sin(gamma)], [0, np.sin(gamma), np.cos(gamma)]])

		T * transpose(T) = I
	b = (b0, b1, b2)

	let hi = (x,y, z)_i obtain by changing only the a and b axes, where ai and bi is the value of the axes of a and b respectively in state i 
	hi = h0 * [[cos(b0), sin(b0), 0], [-sin(b0), cos(b0), 0], [0, 0, 1]] 
			* [[cos(a0), 0, -sin(a0)], [0, 1, 0], [sin(a0), 0, cos(a0)]]
			* [[cos(ai), 0, sin(ai)], [0, 1, 0], [-sin(ai), 0, cos(ai)]]
			* [[cos(bi), -sin(bi), 0], [sin(bi), cos(bi), 0], [0, 0, 1]] 

	rnd**2 is the number of samples
	delta: diffrences in degree between two consecutive samples
	b_offset: bound on the offset between the TCP and camera coordinate
	t_offset: 
	** least square method works very well
	"""
	def tcp(self, rnd=5, delta=5, T_offset=np.matrix([[0, 1, 0], [-1, 0, 0], [0, 0, 1]]), b_offset=[50, 50, 50]):
		# init
		T = np.matrix([])
		B = np.array([])
		t = 0
		sample = {}
		stop = False

		# initial position
		_sys = dict(self.robot.sys)
		a0, b0 = _sys["a"], _sys["b"]
		"""
		# rotate delta degrees at a time
		print("Collecting data...")
		for n in range(1, rnd+1):
			for m in range(1, rnd+1):
				# find a and b
				_sys = dict(self.robot.sys)
				ai, bi = _sys["a"],_sys["b"]

				# frame data
				depth_frame, ir_frame, color_frame, depth_img, ir_img, color_img, depth_int = self.camera.get_all()

				# detect corners
				response, charuco_corner, charuco_id, img_gray = self.board.corner(color_img)

				# show img
				cv2.imshow("Collecting data", color_img)
				cv2.waitKey(1)

				# loop over ids
				for i in range(response):
					# camera xyz
					c = self.camera.xyz(charuco_corner[i][0], depth_frame, depth_int)[0]
					if all(c == 0):
						continue

					# assign key	
					key = str(charuco_id[i][0])

					if key not in sample:
						sample[key] = [[c, [ai, bi]]]
					else:
						sample[key].append([c, [ai, bi]]) 

				# rotate the tcp
				cmd = {"cmd": "lmove", "rel":0, "a": a0+n*delta, "b": b0+m*delta, "id": self.robot.rand_id()}
				trck = self.robot.play(True, **cmd)
				trck.complete()
				time.sleep(1)

		# come to the initial position
		cmd = {"cmd": "lmove", "rel":0, "a": a0, "b": b0, "id": self.robot.rand_id()}
		trck = self.robot.play(True, **cmd)
		trck.complete()
		"""		
		sample = {'0': [[np.array([ 42.50428754, -63.64036323, 285.07127888]), [-84.7575, 0.0]], [np.array([ 42.35635519, -63.41886943, 284.07912509]), [-84.7575, 0.0]], [np.array([ 38.9595347 , -63.78652159, 284.32819995]), [-84.7575, 4.995]], [np.array([ 36.13005842, -64.06333461, 284.17190575]), [-84.74625, 10.00125]], [np.array([ 32.69791752, -64.06321042, 284.17135486]), [-84.7575, 15.0075]], [np.array([ 29.58648286, -63.76992784, 284.25423337]), [-84.7575, 20.0025]], [np.array([ 41.75663939, -35.96034983, 286.3835252 ]), [-79.767, 0.0]], [np.array([ 41.24308892, -36.69154591, 287.18652026]), [-79.75575, 5.00625]], [np.array([ 40.61991546, -37.32877089, 287.23926137]), [-79.75575, 10.00125]], [np.array([ 39.64973037, -37.62118156, 287.0650672 ]), [-79.7445, 14.985]], [np.array([ 38.72653617, -38.27338149, 287.2308886 ]), [-79.767, 20.0025]], [np.array([ 41.73185345,  -8.6108796 , 286.21353345]), [-74.763, 0.0]], [np.array([ 43.14087272,  -9.20450118, 285.14130592]), [-74.763, 4.995]], [np.array([ 44.90020813, -10.18733167, 286.37853526]), [-74.75175, 10.00125]], [np.array([ 46.43264721, -11.43474293, 286.13384584]), [-74.75175, 14.99625]], [np.array([ 47.71873189, -12.38447064, 286.31048941]), [-74.763, 20.0025]], [np.array([ 41.58507179,  18.8226844 , 283.07522825]), [-69.75, 0.0]], [np.array([ 45.34755245,  17.90363685, 283.28044091]), [-69.76125, 5.00625]], [np.array([ 49.40278569,  16.66405412, 283.34853469]), [-69.76125, 10.00125]], [np.array([ 53.14218476,  15.11094573, 283.38140539]), [-69.76125, 14.99625]], [np.array([ 56.86948942,  13.24341422, 283.34970066]), [-69.76125, 19.99125]], [np.array([ 41.47399187,  45.66576673, 278.16120375]), [-64.7595, 0.0]], [np.array([ 47.59932004,  44.76609128, 278.2616468 ]), [-64.7595, 4.995]], [np.array([ 54.30222996,  43.52971933, 278.16700109]), [-64.74825, 10.00125]], [np.array([ 60.14047849,  41.41709217, 278.33078546]), [-64.7595, 15.0075]]], '1': [[np.array([  5.27639339, -62.6074626 , 286.06988405]), [-84.7575, 0.0]], [np.array([  5.25783565, -62.38726422, 285.06375115]), [-84.7575, 0.0]], [np.array([  2.12955094, -59.61566158, 285.27473603]), [-84.7575, 4.995]], [np.array([ -0.37615894, -56.48015219, 285.25122577]), [-84.74625, 10.00125]], [np.array([ -2.88136635, -53.65651485, 285.21884237]), [-84.7575, 15.0075]], [np.array([ -4.75697429, -50.1781221 , 285.01934736]), [-84.7575, 20.0025]], [np.array([  4.980672  , -35.10857409, 287.1288466 ]), [-79.767, 0.0]], [np.array([  4.35078141, -32.59222604, 287.16953563]), [-79.75575, 5.00625]], [np.array([  4.03710011, -29.76765667, 287.28456334]), [-79.75575, 10.00125]], [np.array([  4.0341519 , -27.225423  , 287.07476512]), [-79.7445, 14.985]], [np.array([  4.0376019 , -24.72605941, 287.32027107]), [-79.767, 20.0025]], [np.array([  4.65001576,  -7.66765693, 286.18090159]), [-74.763, 0.0]], [np.array([  6.22382424,  -5.15728784, 286.30721103]), [-74.763, 4.995]], [np.array([  8.42443015,  -2.64358014, 286.31222743]), [-74.75175, 10.00125]], [np.array([ 10.58414398,  -0.75532157, 285.21322292]), [-74.75175, 14.99625]], [np.array([ 13.13851676,   1.1270077 , 286.28468616]), [-74.763, 20.0025]], [np.array([  4.29227939,  19.4600291 , 283.30817105]), [-69.75, 0.0]], [np.array([  8.3086327 ,  21.87529316, 282.3767394 ]), [-69.76125, 5.00625]], [np.array([ 12.94867261,  24.02515899, 282.14803126]), [-69.76125, 10.00125]], [np.array([ 17.65332252,  25.65755289, 283.07613683]), [-69.76125, 14.99625]], [np.array([ 22.25071939,  26.51253106, 282.25594527]), [-69.76125, 19.99125]], [np.array([  4.20067985,  46.12676808, 277.26222384]), [-64.7595, 0.0]], [np.array([ 10.59090061,  48.54916103, 277.19403647]), [-64.7595, 4.995]], [np.array([ 17.58474038,  50.6610966 , 277.09782629]), [-64.74825, 10.00125]], [np.array([ 24.28520085,  51.5886977 , 277.1798414 ]), [-64.7595, 15.0075]]], '2': [[np.array([-32.0065116 , -61.48523202, 285.23323215]), [-84.7575, 0.0]], [np.array([-32.00878958, -61.48960807, 285.25353292]), [-84.7575, 0.0]], [np.array([-34.71932801, -55.36884783, 284.367239  ]), [-84.7575, 4.995]], [np.array([-36.70258085, -49.27462509, 285.22149308]), [-84.74625, 10.00125]], [np.array([-38.47592484, -43.20850174, 284.44074266]), [-84.7575, 15.0075]], [np.array([-39.39021139, -36.63187722, 284.27747479]), [-84.7575, 20.0025]], [np.array([-32.11707014, -34.05489945, 286.21850661]), [-79.767, 0.0]], [np.array([-32.4264358 , -28.39642307, 286.1753494 ]), [-79.75575, 5.00625]], [np.array([-32.10722695, -22.42551668, 286.13078683]), [-79.75575, 10.00125]], [np.array([-31.82906306, -16.79204377, 286.45470585]), [-79.7445, 14.985]], [np.array([-30.56175465, -11.12981406, 286.36798185]), [-79.767, 20.0025]], [np.array([-32.32939799,  -7.01829333, 285.31895657]), [-74.763, 0.0]], [np.array([-30.45615923,  -1.38215932, 285.3785345 ]), [-74.763, 4.995]], [np.array([-27.61866027,   4.25274364, 285.19768288]), [-74.75175, 10.00125]], [np.array([-24.89414555,   9.29574987, 286.27499331]), [-74.75175, 14.99625]], [np.array([-21.37107662,  14.27886366, 285.39899981]), [-74.763, 20.0025]], [np.array([-32.47531909,  20.23804384, 281.15802374]), [-69.75, 0.0]], [np.array([-28.15359277,  25.79230571, 281.15844743]), [-69.76125, 5.00625]], [np.array([-23.29327317,  31.14339195, 282.11342848]), [-69.76125, 10.00125]], [np.array([-17.97086156,  35.67504642, 281.22582682]), [-69.76125, 14.99625]], [np.array([-12.41472145,  40.00170284, 281.2656583 ]), [-69.76125, 19.99125]], [np.array([-32.81762977,  46.86689457, 276.24399958]), [-64.7595, 0.0]], [np.array([-26.36854426,  52.16630046, 275.41118988]), [-64.7595, 4.995]], [np.array([-18.85625684,  57.75220302, 276.10540445]), [-64.74825, 10.00125]], [np.array([-11.28050727,  61.70793255, 276.17895607]), [-64.7595, 15.0075]]], '3': [[np.array([-69.66763715, -60.92953593, 285.56311172]), [-84.7575, 0.0]], [np.array([-69.66957659, -60.93123211, 285.57106134]), [-84.7575, 0.0]], [np.array([-71.9564178 , -51.68320897, 284.69468834]), [-84.7575, 4.995]], [np.array([-73.38806848, -42.41452369, 285.3998422 ]), [-84.74625, 10.00125]], [np.array([-74.45425913, -32.93500254, 284.68396601]), [-84.7575, 15.0075]], [np.array([-74.06943639, -23.53891185, 284.40654528]), [-84.7575, 20.0025]], [np.array([-69.58444305, -33.46087715, 286.51152549]), [-79.767, 0.0]], [np.array([-69.27236064, -24.23284404, 285.22654459]), [-79.75575, 5.00625]], [np.array([-68.52337661, -15.1971337 , 286.02174939]), [-79.75575, 10.00125]], [np.array([-67.31742117,  -6.41255088, 286.23518454]), [-79.7445, 14.985]], [np.array([-65.17501586,   2.07106065, 286.4879454 ]), [-79.767, 20.0025]], [np.array([-69.8534951 ,  -6.10032225, 286.3249349 ]), [-74.763, 0.0]], [np.array([-67.42468075,   2.68925694, 285.35904196]), [-74.763, 4.995]], [np.array([-64.08420016,  11.42129753, 284.43860176]), [-74.75175, 10.00125]], [np.array([-60.26676765,  19.8268692 , 284.1093708 ]), [-74.75175, 14.99625]], [np.array([-55.99420665,  27.66877963, 284.59003041]), [-74.763, 20.0025]], [np.array([-69.85887494,  21.17318351, 281.28340675]), [-69.75, 0.0]], [np.array([-65.23463092,  29.82072864, 281.31913196]), [-69.76125, 5.00625]], [np.array([-59.65836345,  38.1462735 , 281.24122871]), [-69.76125, 10.00125]], [np.array([-53.80857307,  46.18618044, 281.33116649]), [-69.76125, 14.99625]], [np.array([-47.03034008,  53.30722474, 281.43469565]), [-69.76125, 19.99125]], [np.array([-70.41724484,  48.07286043, 276.20531185]), [-64.7595, 0.0]], [np.array([-63.23614986,  56.37680148, 275.3079116 ]), [-64.7595, 4.995]], [np.array([-55.57337965,  65.06684519, 276.28415303]), [-64.74825, 10.00125]]], '4': [[np.array([ 43.0290794 , -26.4677831 , 282.35339647]), [-84.7575, 0.0]], [np.array([ 43.0282136 , -26.46725053, 282.34771516]), [-84.7575, 0.0]], [np.array([ 43.17811036, -27.1813597 , 283.3313198 ]), [-84.7575, 4.995]], [np.array([ 43.46736397, -27.78931031, 283.18910323]), [-84.74625, 10.00125]], [np.array([ 43.17276504, -28.73256523, 283.29624422]), [-84.7575, 15.0075]], [np.array([ 43.17755198, -29.66859939, 283.32765574]), [-84.7575, 20.0025]], [np.array([ 42.86384581,   0.48988327, 281.26913369]), [-79.767, 0.0]], [np.array([ 45.32146071,  -0.43606204, 281.18882668]), [-79.75575, 5.00625]], [np.array([ 47.62263836,  -1.35706097, 280.19640436]), [-79.75575, 10.00125]], [np.array([ 49.76420551,  -2.58649187, 280.12928636]), [-79.7445, 14.985]], [np.array([ 52.10717978,  -4.13877782, 281.15444175]), [-79.767, 20.0025]], [np.array([ 42.55895099,  27.26148059, 277.27080273]), [-74.763, 0.0]], [np.array([ 47.39988306,  26.33193964, 277.09574982]), [-74.763, 4.995]], [np.array([ 52.26189   ,  25.11271825, 277.06505063]), [-74.75175, 10.00125]], [np.array([ 56.55830758,  22.99946092, 277.24918837]), [-74.75175, 14.99625]], [np.array([ 61.11954593,  20.86785698, 277.22717961]), [-74.763, 20.0025]], [np.array([ 42.52845765,  53.75991446, 271.25124363]), [-69.75, 0.0]], [np.array([ 49.64927214,  52.83822823, 271.10450197]), [-69.76125, 5.00625]], [np.array([ 56.77707205,  51.33606702, 271.02798632]), [-69.76125, 10.00125]], [np.array([ 63.38860604,  49.00662268, 271.30567144]), [-69.76125, 14.99625]], [np.array([ 70.21884352,  46.01530253, 271.22451694]), [-69.76125, 19.99125]]], '5': [[np.array([  6.13311444, -25.51833373, 282.13440168]), [-84.7575, 0.0]], [np.array([  6.13310669, -25.51830147, 282.134045  ]), [-84.7575, 0.0]], [np.array([  6.13878471, -23.06252015, 282.39524438]), [-84.7575, 4.995]], [np.array([  6.76033715, -20.58750003, 282.45541935]), [-84.74625, 10.00125]], [np.array([  7.37539098, -18.09483042, 282.256796  ]), [-84.7575, 15.0075]], [np.array([  8.60861006, -15.91458664, 282.04719902]), [-84.7575, 20.0025]], [np.array([  5.80335614,   1.41543381, 281.16598429]), [-79.767, 0.0]], [np.array([  8.2443647 ,   3.87060036, 280.19251398]), [-79.75575, 5.00625]], [np.array([ 11.3569951 ,   6.04244852, 281.08983778]), [-79.75575, 10.00125]], [np.array([ 14.09664958,   7.56454909, 280.33512241]), [-79.7445, 14.985]], [np.array([ 17.18044011,   9.10597375, 280.43058995]), [-79.767, 20.0025]], [np.array([  5.41730185,  28.16800846, 277.20803432]), [-74.763, 0.0]], [np.array([ 10.25186303,  30.19393292, 276.25917265]), [-74.763, 4.995]], [np.array([ 15.40973169,  32.31930788, 276.28511344]), [-74.75175, 10.00125]], [np.array([ 20.65009937,  33.36381315, 277.40631148]), [-74.75175, 14.99625]], [np.array([ 26.40216199,  34.53592761, 277.03979918]), [-74.763, 20.0025]], [np.array([  5.27805774,  54.41757587, 270.08278302]), [-69.75, 0.0]], [np.array([ 12.40123332,  56.52106086, 270.21948011]), [-69.76125, 5.00625]], [np.array([ 19.8143906 ,  58.28856595, 270.16445332]), [-69.76125, 10.00125]], [np.array([ 27.51760463,  59.15852491, 270.07519201]), [-69.76125, 14.99625]], [np.array([ 35.09357464,  59.43413642, 271.33344143]), [-69.76125, 19.99125]]], '6': [[np.array([-31.06108192, -24.60671222, 282.33286924]), [-84.7575, 0.0]], [np.array([-31.06100919, -24.6066546 , 282.33220817]), [-84.7575, 0.0]], [np.array([-30.77417077, -19.04355965, 282.54473747]), [-84.7575, 4.995]], [np.array([-29.40576122, -13.09506087, 281.32467629]), [-84.74625, 10.00125]], [np.array([-28.18650801,  -7.85082626, 281.48715847]), [-84.7575, 15.0075]], [np.array([-26.00934951,  -2.59765648, 281.33846639]), [-84.7575, 20.0025]], [np.array([-31.46127168,   2.33457138, 280.37421132]), [-79.767, 0.0]], [np.array([-28.68632072,   7.87209933, 280.33103143]), [-79.75575, 5.00625]], [np.array([-24.97602252,  13.09350629, 280.14233992]), [-79.75575, 10.00125]], [np.array([-21.61787673,  18.03383269, 280.47008177]), [-79.7445, 14.985]], [np.array([-17.29814394,  22.63985358, 280.33172248]), [-79.767, 20.0025]], [np.array([-31.61832645,  28.68901695, 276.36555494]), [-74.763, 0.0]], [np.array([-26.35276162,  34.01027527, 275.24634512]), [-74.763, 4.995]], [np.array([-20.60707166,  39.13849677, 275.19615101]), [-74.75175, 10.00125]], [np.array([-14.91891018,  43.8237443 , 276.17214639]), [-74.75175, 14.99625]], [np.array([ -8.24611933,  47.75312789, 276.10932947]), [-74.763, 20.0025]], [np.array([-32.10393832,  55.33829014, 270.23649008]), [-69.75, 0.0]], [np.array([-24.59815411,  60.46015422, 269.27179105]), [-69.76125, 5.00625]], [np.array([-16.67715212,  65.42969244, 270.26799636]), [-69.76125, 10.00125]]], '7': [[np.array([-68.29253795, -23.6885677 , 282.46913849]), [-84.7575, 0.0]], [np.array([-68.28953843, -23.68752725, 282.45673195]), [-84.7575, 0.0]], [np.array([-67.65457544, -14.69452449, 282.39528974]), [-84.7575, 4.995]], [np.array([-65.78657282,  -6.01589805, 282.36239773]), [-84.74625, 10.00125]], [np.array([-63.56799913,   2.65899007, 282.14740981]), [-84.7575, 15.0075]], [np.array([-60.4550398 ,  11.01688965, 282.07688807]), [-84.7575, 20.0025]], [np.array([-68.34475425,   3.25498175, 280.14071586]), [-79.767, 0.0]], [np.array([-65.66702837,  11.87999728, 280.52731726]), [-79.75575, 5.00625]], [np.array([-61.6214069 ,  20.48670527, 280.33828522]), [-79.75575, 10.00125]], [np.array([-56.79201865,  28.37992897, 279.29360544]), [-79.7445, 14.985]], [np.array([-51.57630276,  36.04111793, 279.27924172]), [-79.767, 20.0025]], [np.array([-68.91074229,  29.88915795, 276.2445549 ]), [-74.763, 0.0]], [np.array([-63.21646275,  38.23604194, 275.22220088]), [-74.763, 4.995]], [np.array([-57.38225005,  46.86455363, 276.23020157]), [-74.75175, 10.00125]], [np.array([-50.75602282,  54.18959791, 276.48126513]), [-74.75175, 14.99625]], [np.array([-42.82879214,  60.99048707, 274.31538768]), [-74.763, 20.0025]], [np.array([-69.27346298,  56.05367792, 269.39850669]), [-69.75, 0.0]], [np.array([-61.5266722 ,  64.86414097, 269.15202607]), [-69.76125, 5.00625]], [np.array([-53.27105272,  72.86544806, 269.24713742]), [-69.76125, 10.00125]]], '8': [[np.array([ 43.80634404,  10.29912719, 279.40175203]), [-84.7575, 0.0]], [np.array([ 43.80460909,  10.2987193 , 279.39068631]), [-84.7575, 0.0]], [np.array([ 47.15193687,   9.37346744, 279.23078633]), [-84.7575, 4.995]], [np.array([ 50.68514546,   8.48101585, 280.11951965]), [-84.74625, 10.00125]], [np.array([ 53.48951084,   6.64095944, 280.31001925]), [-84.7575, 15.0075]], [np.array([ 56.35727766,   4.77734266, 279.2698921 ]), [-84.7575, 20.0025]], [np.array([ 43.75994086,  37.0316638 , 275.25072232]), [-79.767, 0.0]], [np.array([ 49.20169823,  36.12683957, 275.26161275]), [-79.75575, 5.00625]], [np.array([ 54.73336886,  34.48368359, 274.20661714]), [-79.75575, 10.00125]], [np.array([ 60.35083581,  32.4838385 , 275.11052581]), [-79.7445, 14.985]], [np.array([ 65.52072438,  29.78232473, 275.25716272]), [-79.767, 20.0025]], [np.array([ 43.79870497,  63.43098783, 268.08871515]), [-74.763, 0.0]], [np.array([ 51.48073724,  62.2891519 , 268.23971133]), [-74.763, 4.995]], [np.array([ 59.4216285 ,  60.80595919, 268.19013289]), [-74.75175, 10.00125]], [np.array([ 67.08896995,  57.87242805, 268.23567082]), [-74.75175, 14.99625]], [np.array([ 74.71314267,  54.90426523, 268.1169893 ]), [-74.763, 20.0025]]], '9': [[np.array([  6.96438071,  11.17150512, 278.21770805]), [-84.7575, 0.0]], [np.array([  6.96436569,  11.17148103, 278.21710806]), [-84.7575, 0.0]], [np.array([ 10.35765625,  13.65789694, 279.11000514]), [-84.7575, 4.995]], [np.array([ 14.04728303,  15.50933075, 279.35337965]), [-84.74625, 10.00125]], [np.array([ 17.72534798,  17.0398367 , 279.31350754]), [-84.7575, 15.0075]], [np.array([ 21.71404666,  18.26765709, 279.33869169]), [-84.7575, 20.0025]], [np.array([  6.56217376,  37.78977415, 274.17589745]), [-79.767, 0.0]], [np.array([ 12.28270397,  39.89913246, 274.19665626]), [-79.75575, 5.00625]], [np.array([ 18.30197455,  41.70055329, 274.16941153]), [-79.75575, 10.00125]], [np.array([ 24.33048919,  42.61730551, 274.25986668]), [-79.7445, 14.985]], [np.array([ 30.6396758 ,  43.19897843, 274.1309002 ]), [-79.767, 20.0025]], [np.array([  6.39523272,  63.80743021, 267.20089589]), [-74.763, 0.0]], [np.array([ 14.37220631,  66.11729458, 268.24403674]), [-74.763, 4.995]]], '10': [[np.array([-30.12123161,  12.13742309, 279.36611833]), [-84.7575, 0.0]], [np.array([-30.12130679,  12.13745338, 279.36681564]), [-84.7575, 0.0]], [np.array([-26.42607816,  17.64663898, 279.21407193]), [-84.7575, 4.995]], [np.array([-22.13609284,  22.85799152, 279.23806572]), [-84.74625, 10.00125]], [np.array([-17.85362532,  27.46996097, 279.39121948]), [-84.7575, 15.0075]], [np.array([-12.62992403,  31.74060051, 279.19624971]), [-84.7575, 20.0025]], [np.array([-30.4690234 ,  38.69796034, 274.21464707]), [-79.767, 0.0]], [np.array([-24.34634476,  43.93241148, 273.07958713]), [-79.75575, 5.00625]], [np.array([-18.13059464,  48.94533457, 274.29957031]), [-79.75575, 10.00125]], [np.array([-11.19906342,  53.13769829, 274.18497918]), [-79.7445, 14.985]], [np.array([ -3.95956116,  56.54156325, 273.18428119]), [-79.767, 20.0025]], [np.array([-30.76598876,  64.48344643, 266.35936201]), [-74.763, 0.0]], [np.array([-22.55365514,  69.96398244, 266.07916456]), [-74.763, 4.995]]], '11': [[np.array([-67.25115866,  13.06024993, 279.43080873]), [-84.7575, 0.0]], [np.array([-67.25430259,  13.06086049, 279.4438719 ]), [-84.7575, 0.0]], [np.array([-63.30853003,  21.86360976, 278.28348289]), [-84.7575, 4.995]], [np.array([-58.64050429,  30.2234835 , 279.33448932]), [-84.74625, 10.00125]], [np.array([-53.25570465,  37.76640394, 278.44056928]), [-84.7575, 15.0075]], [np.array([-47.12146008,  45.08136143, 278.32265461]), [-84.7575, 20.0025]], [np.array([-67.84148859,  39.62373412, 274.37346631]), [-79.767, 0.0]], [np.array([-61.23577777,  48.1365722 , 273.12686181]), [-79.75575, 5.00625]], [np.array([-54.34367966,  56.23524362, 273.15269178]), [-79.75575, 10.00125]], [np.array([-46.88680603,  63.48530535, 273.39077827]), [-79.7445, 14.985]], [np.array([-68.14560908,  65.8929555 , 266.14880934]), [-74.763, 0.0]]], '12': [[np.array([ 44.994481  ,  47.34549927, 277.2713795 ]), [-84.7575, 0.0]], [np.array([ 44.99489103,  47.34593073, 277.27390624]), [-84.7575, 0.0]], [np.array([ 51.18725712,  46.25164119, 276.19083133]), [-84.7575, 4.995]], [np.array([ 57.86540509,  44.43815042, 276.22320476]), [-84.74625, 10.00125]], [np.array([ 64.16171884,  42.16455246, 277.220074  ]), [-84.7575, 15.0075]], [np.array([ 69.99485261,  39.28359734, 276.21639312]), [-84.7575, 20.0025]]], '13': [[np.array([  7.84950406,  48.23088873, 277.11327089]), [-84.7575, 0.0]], [np.array([  7.82115222,  48.05667978, 276.11234502]), [-84.7575, 0.0]], [np.array([ 14.24456087,  50.37982641, 277.22352488]), [-84.7575, 4.995]], [np.array([ 21.24918703,  51.91069615, 277.2749115 ]), [-84.74625, 10.00125]], [np.array([ 28.2455021 ,  52.50876801, 277.21924659]), [-84.7575, 15.0075]], [np.array([ 35.24869298,  52.8169216 , 277.23977392]), [-84.7575, 20.0025]]], '14': [[np.array([-29.06364676,  48.79712285, 275.16135513]), [-84.7575, 0.0]], [np.array([-29.16973842,  48.97524878, 276.16579004]), [-84.7575, 0.0]], [np.array([-22.50944104,  54.1529395 , 276.29422989]), [-84.7575, 4.995]], [np.array([-14.91720208,  58.97179459, 276.14052681]), [-84.74625, 10.00125]], [np.array([ -7.34177443,  62.64513285, 276.30196711]), [-84.7575, 15.0075]]], '15': [[np.array([-66.46895335,  50.19031771, 276.18071825]), [-84.7575, 0.0]], [np.array([-66.7075639 ,  50.37049075, 277.17215386]), [-84.7575, 0.0]], [np.array([-59.48793694,  58.67069779, 276.14977317]), [-84.7575, 4.995]], [np.array([-51.63604474,  66.5908961 , 276.31715227]), [-84.74625, 10.00125]], [np.array([-43.13787875,  73.55988546, 276.29505818]), [-84.7575, 15.0075]]]}				
		# select C
		c_list = list(sample.values())
		max_value = max([len(c) for c in c_list])
		max_index = [len(c) for c in c_list].index(max_value)
		# shape input data and form hi
		C = c_list[max_index]

		# format C
		a0, b0 = C[0][1]
		ah0 = np.matrix([[np.cos(np.radians(b0)), np.sin(np.radians(b0)), 0], [-np.sin(np.radians(b0)), np.cos(np.radians(b0)), 0], [0, 0, 1]])* \
			np.matrix([[np.cos(np.radians(a0)), 0, -np.sin(np.radians(a0))], [0, 1, 0], [np.sin(np.radians(a0)), 0, np.cos(np.radians(a0))]])
		for c in C:
			ai, bi = c.pop()
			ahi = ah0 * \
				np.matrix([[np.cos(np.radians(ai)), 0, np.sin(np.radians(ai))], [0, 1, 0], [-np.sin(np.radians(ai)), 0, np.cos(np.radians(ai))]])* \
				np.matrix([[np.cos(np.radians(bi)), -np.sin(np.radians(bi)), 0], [np.sin(np.radians(bi)), np.cos(np.radians(bi)), 0], [0, 0, 1]])			
			c.append(ahi)

		#C = C[0:5]
		print("Processing...")		
		start = time.time()

		# global optimization
		#result = scipy.optimize.differential_evolution(self.eq_min_tcp, [(0, 2*np.pi), (0, 2*np.pi), (0, 2*np.pi), (-1, 1), (-1, 1) , (-1, 1), (-1, 1), (-1, 1), (-1, 1)], args=(C), maxiter=2000)
		"""
		result = scipy.optimize.dual_annealing(self.eq_min_tcp,
					[(-0.03*np.pi, 0.03*np.pi), (-0.03*np.pi, 0.03*np.pi), (-0.03*np.pi, 0.03*np.pi), (-b_offset[0], 0), (0, b_offset[1]) , (0, b_offset[2]), (-100, 100), (-100, 100), (0, 100)], 
					args=(C, T_offset), 
					maxiter=2000)
		"""
		# least square
		# bounds -0.03*pi, +0.03*pi
		
		result = scipy.optimize.least_squares(self.eq_min_tcp, 
					np.append(np.array([0, 0, 0, -b_offset[0]/2, 0, b_offset[2]/2]), C[0][0]), 
					bounds=([-0.03*np.pi, -0.03*np.pi, -0.03*np.pi, -b_offset[0], -b_offset[1], 0, -b_offset[0]-np.linalg.norm(C[0][0]), -b_offset[1]-np.linalg.norm(C[0][0]), 0],
						[0.03*np.pi, 0.03*np.pi, 0.03*np.pi, 0, b_offset[1], b_offset[2], b_offset[0]+np.linalg.norm(C[0][0]), b_offset[1]+np.linalg.norm(C[0][0]), b_offset[2]+np.linalg.norm(C[0][0])]), 
					args=(C, T_offset), 
					max_nfev=10000,
					method="trf")
				
		print("processing time: ", time.time()-start)
		print(result)
		x = result.x
		alpha, beta, gamma = np.array(x[0:3]) 
		# T matrix: alpha, beta, gamma
		T = T_offset * \
			np.matrix([[np.cos(alpha), -np.sin(alpha), 0], [np.sin(alpha), np.cos(alpha), 0], [0, 0, 1]])* \
			np.matrix([[np.cos(beta), 0, np.sin(beta)], [0, 1, 0], [-np.sin(beta), 0, np.cos(beta)]])* \
			np.matrix([[1, 0, 0], [0, np.cos(gamma), -np.sin(gamma)], [0, np.sin(gamma), np.cos(gamma)]])

		B = np.array(x[3:6])
		
		xyz_c0, _ = C[0]
		print("xyz camera: ", xyz_c0)
		print("TCP calculated: ", x[6:12])
		print("TCP formula: ", xyz_c0 * T + B)

		return [T, B]		

	"""
	x is an np array: alpha, beta, gamma, b0, b1, b2, x, y, z
	c = [[[ci0, ci1, ci2], ahi], ...]
	"""
	def eq_min_tcp(self, x, C, T_offset):
		eq = []

		alpha, beta, gamma = np.array(x[0:3]) 
		B = np.array(x[3:6])
		h0 = np.array(x[6:9])

		# T matrix: alpha, beta, gamma
		T = T_offset * \
			np.matrix([[np.cos(alpha), -np.sin(alpha), 0], [np.sin(alpha), np.cos(alpha), 0], [0, 0, 1]])* \
			np.matrix([[np.cos(beta), 0, np.sin(beta)], [0, 1, 0], [-np.sin(beta), 0, np.cos(beta)]])* \
			np.matrix([[1, 0, 0], [0, np.cos(gamma), -np.sin(gamma)], [0, np.sin(gamma), np.cos(gamma)]])
		
		# rotation a and b
		for row in C:
			xyz_c, ahi = row
			zero = h0 * ahi - (xyz_c*T + B)
			eq.append(np.linalg.norm(zero))
		sm = sum(eq)
		print(sm)
		return sm


def main_tcp(ip, port, config_path):
	# camera object
	with open(config_path) as json_file:
		arg = json.load(json_file)
	#dc = camera(arg)
	#dc.on()

	# board object
	board = charuco()

	# robot object
	robot = dorna()
	robot.connect(ip, port)
	
	# sync object
	sync_camera = sync(robot, None, board)
	
	# tcp mount
	T, B = sync_camera.tcp()

	print(T)
	print(B)
	# close objects
	#dc.off()
	robot.close()	

"""
collect the charuco corners:
return: [ids, pixel, xyz, depth_frame, ir_frame, color_frame, depth_img, ir_img, color_img, depth_int]
"""
def get_charuco_corners(camera, board):
	print("press q on keyboard to exit")
	items = None
	successful_round = 0
	while True:
		depth_frame, ir_frame, color_frame, depth_img, ir_img, color_img, depth_int = camera.get_all()
		result = board.corner(color_img)

		#display result
		text = "successful round: "+ str(successful_round)
		cv2.putText(color_img, text, (10,30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2, cv2.LINE_AA)
		cv2.imshow("charuco", color_img)
		key = cv2.waitKey(1)
		if key == ord("q"):
			break

		if result == None:
			continue

		# assign the values
		response, charuco_corner, charuco_id, img_gray = result
		# check number of ids
		sqr_x, sqr_y =  board.board.getChessboardSize()
		if response != (sqr_x-1) * (sqr_y-1):
			continue

		# find the id, pixel and depth assigned to each corner
		pixel = []
		xyz = []
		for i in range(response):
			index = np.where(charuco_id == [i])
			pixel.append(charuco_corner[index][0])
			xyz.append(camera.xyz(charuco_corner[index][0], depth_frame, depth_int))

		# update items
		items = [pixel, xyz, depth_frame, ir_frame, color_frame, depth_img, ir_img, color_img, depth_int]
		successful_round += 1

	return items

def camera_to_head(xyz_c, T, B):
	return xyz_c*T+B

def camera_to_robot(xyz_c, joint, knmtc, T, B):
	xyz_h = camera_to_head(xyz_c, T, B)
	print("tcp: ", xyz_h)
	# tcp to base
	return knmtc.forward(joint, xyz_h.tolist())

def main_camera_to_robot(ip, port, config_path):
	# T and B
	T = np.matrix([[ 0.00580154,  0.99639839,  0.08459663],
				 [-0.99996255,  0.00632395, -0.00590857],
				 [-0.00642227, -0.08455918,  0.99639776]])
	B = np.array([-25.7939244,   -9.41390663,   9.9922231])

	# camera object
	with open(config_path) as json_file:
		arg = json.load(json_file)
	dc = camera(arg)
	dc.on()

	# board object
	board = charuco()

	# robot object
	robot = dorna()
	robot.connect(ip, port)

	# kinematic
	knmtc = tool.kinematic()
	

	_sys = dict(robot.sys)
	joint_init = [_sys[x] for x in ["j"+str(i) for i in range(8)]]

	# loop
	while True:
		# go to init point
		cmd = {"cmd": "jmove", "rel":0, "j0": joint_init[0], "j1": joint_init[1],
				"j2": joint_init[2], "j3": joint_init[3], "j4": joint_init[4],
				"id": robot.rand_id()}
		trck = robot.play(True, **cmd)
		trck.complete()
		time.sleep(1)

		# find a and b
		_sys = dict(robot.sys)
		joint = [_sys[x] for x in ["j"+str(i) for i in range(8)]]

		# frame data
		depth_frame, ir_frame, color_frame, depth_img, ir_img, color_img, depth_int = dc.get_all()

		# detect corners
		response, charuco_corner, charuco_id, img_gray = board.corner(color_img)

		# show img
		cv2.imshow("Collecting data", color_img)
		cv2.waitKey(1)

		# loop over ids
		for i in range(response):
			# id0
			if charuco_id[i][0] != 0:
				continue

			# camera xyz
			xyz_c = dc.xyz(charuco_corner[i][0], depth_frame, depth_int)[0]
			print("camera: ", xyz_c)
			if all(xyz_c == 0):
				continue

			# camera to robot
			xyz_r = camera_to_robot(xyz_c, joint, knmtc, T, B)
			print("robot: ", xyz_r)
			# rotate the tcp
			cmd = {"cmd": "lmove", "rel":0, "x": xyz_r[0], "y": xyz_r[1], "z": xyz_r[2] + 55, "a": -90, "id": robot.rand_id()}
			trck = robot.play(True, **cmd)
			trck.complete()
			time.sleep(2)
			break

		key = input("take photo? (y/n)")
		if key != "y":
			break


	# close objects
	dc.off()
	robot.close()	


if __name__ == '__main__':
	ip = "10.0.0.16"
	port = 443
	config_path = "config.json"
	#main_tcp(ip, port, config_path)
	main_camera_to_robot(ip, port, config_path)